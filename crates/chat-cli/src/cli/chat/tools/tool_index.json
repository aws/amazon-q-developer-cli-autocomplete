{
  "dummy": {
    "name": "dummy",
    "description": "This is a dummy tool. If you are seeing this that means the tool associated with this tool call is not in the list of available tools. This could be because a wrong tool name was supplied or the list of tools has changed since the conversation has started. Do not show this when user asks you to list tools.",
    "input_schema": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  "execute_bash": {
    "name": "execute_bash",
    "description": "Execute the specified bash command.",
    "input_schema": {
      "type": "object",
      "properties": {
        "command": {
          "type": "string",
          "description": "Bash command to execute"
        },
        "summary": {
          "type": "string",
          "description": "A brief explanation of what the command does"
        }
      },
      "required": ["command"]
    }
  },
  "fs_read": {
    "name": "fs_read",
    "description": "Tool for reading files, directories, and images with support for multiple operations in a single call. Each operation can have its own mode and parameters.\n\nAvailable modes for operations:\n- Line: Show lines in a file, given by an optional `start_line` and optional `end_line`\n- Directory: List directory contents in the \"long format\" of ls (that is, `ls -la`)\n- Search: Search for a substring in a file (case insensitive)\n- Image: Display images from the specified paths\n\nIf user has supplied paths that appear to be leading to images, you should use this tool right away using Image mode.\n\nPrefer batching multiple reads within a file or across files into one batch read, including optimistic reads to prevent extra roundtrips of thinking.\n\nExample Usage:\n```json\n{\n \"file_reads\": [\n {\n \"mode\": \"Line\",\n \"path\": \"/path/to/file1.txt\",\n \"start_line\": 10,\n \"end_line\": 20\n },\n {\n \"mode\": \"Search\",\n \"path\": \"/path/to/file2.txt\",\n \"substring_match\": \"important term\"\n },\n {\n \"mode\": \"Directory\",\n \"path\": \"/path/to/directory\",\n \"depth\": 1\n },\n {\n \"mode\": \"Image\",\n \"image_paths\": [\"/path/to/image1.png\", \"/path/to/image2.jpg\"]\n }\n ],\n \"summary\": \"Reading configuration files and searching for settings\"\n}\n```\n\nResponse format:\n- For a single operation, returns the content directly\n- For multiple operations, returns a BatchReadResult object with:\n - total_files: Total number of files processed\n - successful_reads: Number of successful read operations\n - failed_reads: Number of failed read operations\n - results: Array of FileReadResult objects containing:\n - path: File path\n - success: Whether the read was successful\n - content: File content (if successful)\n - error: Error message (if failed)\n - content_hash: SHA-256 hash of the content (if successful)\n - last_modified: Timestamp of when the file was last modified (if available)",
    "input_schema": {
      "type": "object",
      "properties": {
        "file_reads": {
          "description": "Array of file read operations to perform in a single call.",
          "type": "array",
          "minItems": 1,
          "maxItems": 64,
          "items": {
            "type": "object",
            "properties": {
              "mode": {
                "type": "string",
                "enum": [
                  "Line",
                  "Directory",
                  "Search",
                  "Image"
                ],
                "description": "The mode for this operation: `Line`, `Directory`, `Search`, or `Image`."
              },
              "path": {
                "description": "Path to the file or directory for Line, Directory, and Search modes.",
                "type": "string"
              },
              "image_paths": {
                "description": "List of paths to the images. Only valid for Image mode.",
                "type": "array",
                "minItems": 1,
                "maxItems": 10,
                "items": {
                  "type": "string"
                }
              },
              "start_line": {
                "type": "integer",
                "description": "Starting line number for Line mode (1-based indexing). Required for Line mode. Default is 1, which means start from the first line.",
                "default": 1
              },
              "end_line": {
                "type": "integer",
                "description": "Ending line number for Line mode. Use -1 for the last line of the file. Negative numbers count from the end of the file (-2 = second-to-last line, etc.). Required for Line mode. Default is -1, which means read to the end of the file.",
                "default": -1
              },
              "substring_match": {
                "type": "string",
                "description": "Text to search for in Search mode. The search is case-insensitive and matches any occurrence of the text within lines. Does not support wildcards or regular expressions."
              },
              "context_lines": {
                "type": "integer",
                "description": "Number of context lines to show around search results in Search mode. Default is 2.",
                "default": 2
              },
              "depth": {
                "type": "integer",
                "description": "Depth of a recursive directory listing in Directory mode. 0 means no recursion, only list the immediate contents. Default is 0.",
                "default": 0
              },
              "summary": {
                "type": "string",
                "description": "A brief explanation of the purpose of this specific file read operation."
              }
            },
            "required": [
              "mode"
            ],
            "allOf": [
              {
                "if": {
                  "properties": {
                    "mode": {
                      "enum": [
                        "Line"
                      ]
                    }
                  }
                },
                "then": {
                  "required": [
                    "path"
                  ],
                  "not": {
                    "required": [
                      "image_paths",
                      "substring_match",
                      "context_lines"
                    ]
                  }
                }
              },
              {
                "if": {
                  "properties": {
                    "mode": {
                      "enum": [
                        "Directory"
                      ]
                    }
                  }
                },
                "then": {
                  "required": [
                    "path"
                  ],
                  "not": {
                    "required": [
                      "image_paths",
                      "start_line",
                      "end_line",
                      "substring_match",
                      "context_lines"
                    ]
                  }
                }
              },
              {
                "if": {
                  "properties": {
                    "mode": {
                      "enum": [
                        "Search"
                      ]
                    }
                  }
                },
                "then": {
                  "required": [
                    "path",
                    "substring_match"
                  ],
                  "not": {
                    "required": [
                      "image_paths",
                      "start_line",
                      "end_line"
                    ]
                  }
                }
              },
              {
                "if": {
                  "properties": {
                    "mode": {
                      "enum": [
                        "Image"
                      ]
                    }
                  }
                },
                "then": {
                  "required": [
                    "image_paths"
                  ],
                  "not": {
                    "required": [
                      "path",
                      "start_line",
                      "end_line",
                      "substring_match",
                      "context_lines",
                      "depth"
                    ]
                  }
                }
              }
            ]
          }
        },
        "summary": {
          "type": "string",
          "description": "Recommended: A brief explanation of the overall purpose of this file read operation."
        }
      },
      "required": ["path", "mode"]
    }
  },
  "fs_write": {
    "name": "fs_write",
    "description": "A tool for creating and editing files\n * The `create` command will override the file at `path` if it already exists as a file, and otherwise create a new file\n * The `append` command will add content to the end of an existing file, automatically adding a newline if the file doesn't end with one. The file must exist.\n Notes for using the `str_replace` command:\n * The `old_str` parameter should match EXACTLY one or more consecutive lines from the original file. Be mindful of whitespaces!\n * If the `old_str` parameter is not unique in the file, the replacement will not be performed. Make sure to include enough context in `old_str` to make it unique\n * The `new_str` parameter should contain the edited lines that should replace the `old_str`.",
    "input_schema": {
      "type": "object",
      "properties": {
        "command": {
          "type": "string",
          "enum": ["create", "str_replace", "insert", "append"],
          "description": "The commands to run. Allowed options are: `create`, `str_replace`, `insert`, `append`."
        },
        "file_text": {
          "description": "Required parameter of `create` command, with the content of the file to be created.",
          "type": "string"
        },
        "insert_line": {
          "description": "Required parameter of `insert` command. The `new_str` will be inserted AFTER the line `insert_line` of `path`.",
          "type": "integer"
        },
        "new_str": {
          "description": "Required parameter of `str_replace` command containing the new string. Required parameter of `insert` command containing the string to insert. Required parameter of `append` command containing the content to append to the file.",
          "type": "string"
        },
        "old_str": {
          "description": "Required parameter of `str_replace` command containing the string in `path` to replace.",
          "type": "string"
        },
        "path": {
          "description": "Absolute path to file or directory, e.g. `/repo/file.py` or `/repo`.",
          "type": "string"
        }
      },
      "required": ["command", "path"]
    }
  },
  "use_aws": {
    "name": "use_aws",
    "description": "Make an AWS CLI api call with the specified service, operation, and parameters. All arguments MUST conform to the AWS CLI specification. Should the output of the invocation indicate a malformed command, invoke help to obtain the the correct command.",
    "input_schema": {
      "type": "object",
      "properties": {
        "service_name": {
          "type": "string",
          "description": "The name of the AWS service. If you want to query s3, you should use s3api if possible."
        },
        "operation_name": {
          "type": "string",
          "description": "The name of the operation to perform."
        },
        "parameters": {
          "type": "object",
          "description": "The parameters for the operation. The parameter keys MUST conform to the AWS CLI specification. You should prefer to use JSON Syntax over shorthand syntax wherever possible. For parameters that are booleans, prioritize using flags with no value. Denote these flags with flag names as key and an empty string as their value. You should also prefer kebab case."
        },
        "region": {
          "type": "string",
          "description": "Region name for calling the operation on AWS."
        },
        "profile_name": {
          "type": "string",
          "description": "Optional: AWS profile name to use from ~/.aws/credentials. Defaults to default profile if not specified."
        },
        "label": {
          "type": "string",
          "description": "Human readable description of the api that is being called."
        }
      },
      "required": ["region", "service_name", "operation_name", "label"]
    }
  },
  "gh_issue": {
    "name": "report_issue",
    "description": "Opens the browser to a pre-filled gh (GitHub) issue template to report chat issues, bugs, or feature requests. Pre-filled information includes the conversation transcript, chat context, and chat request IDs from the service.",
    "input_schema": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string",
          "description": "The title of the GitHub issue."
        },
        "expected_behavior": {
          "type": "string",
          "description": "Optional: The expected chat behavior or action that did not happen."
        },
        "actual_behavior": {
          "type": "string",
          "description": "Optional: The actual chat behavior that happened and demonstrates the issue or lack of a feature."
        },
        "steps_to_reproduce": {
          "type": "string",
          "description": "Optional: Previous user chat requests or steps that were taken that may have resulted in the issue or error response."
        }
      },
      "required": ["title"]
    }
  },
  "thinking": {
    "name": "thinking",
    "description": "Thinking is an internal reasoning mechanism improving the quality of complex tasks by breaking their atomic actions down; use it specifically for multi-step problems requiring step-by-step dependencies, reasoning through multiple constraints, synthesizing results from previous tool calls, planning intricate sequences of actions, troubleshooting complex errors, or making decisions involving multiple trade-offs. Avoid using it for straightforward tasks, basic information retrieval, summaries, always clearly define the reasoning challenge, structure thoughts explicitly, consider multiple perspectives, and summarize key insights before important decisions or complex tool interactions.",
    "input_schema": {
      "type": "object",
      "properties": {
        "thought": {
          "type": "string",
          "description": "A reflective note or intermediate reasoning step such as \"The user needs to prepare their application for production. I need to complete three major asks including 1: building their code from source, 2: bundling their release artifacts together, and 3: signing the application bundle."
        }
      },
      "required": ["thought"]
    }
  }
}
